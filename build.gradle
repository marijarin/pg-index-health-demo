import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'java'
    id 'com.github.spotbugs' version '5.0.13'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'info.solidsoft.pitest' version '1.9.11'
    id 'io.freefair.lombok' version '6.6.3'
    id 'nebula.lint' version '18.0.3'
    id 'net.ltgt.errorprone' version '3.0.1'
}

group 'io.github.mfvanek'
version '0.9.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        disableWarningsInGeneratedCode = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

def pgihVersion = '0.8.0'
def logbackVersion = '1.4.5'
def postgresqlVersion = '42.5.4'
dependencies {
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "io.github.mfvanek:pg-index-health:${pgihVersion}"
    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.liquibase:liquibase-core:4.20.0'
    implementation 'org.apache.commons:commons-dbcp2:2.9.0'
    implementation enforcedPlatform('org.testcontainers:testcontainers-bom:1.17.6')
    implementation 'org.testcontainers:testcontainers'
    implementation 'org.testcontainers:postgresql'

    testImplementation enforcedPlatform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.1.1'
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "org.postgresql:postgresql:${postgresqlVersion}"

    pitest 'it.mulders.stryker:pit-dashboard-reporter:0.1.5'
    checkstyle 'com.thomasjensen.checkstyle.addons:checkstyle-addons:7.0.1'
    errorprone 'com.google.errorprone:error_prone_core:2.18.0'
}

test {
    useJUnitPlatform()
    dependsOn checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest
    maxParallelForks = 1
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

spotbugs {
    showProgress = true
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file("config/spotbugs/exclude.xml")
}
tasks.withType(SpotBugsTask).configureEach {
    reports {
        xml {
            required.set(true)
        }
        html {
            required.set(true)
        }
    }
}

checkstyle {
    toolVersion '10.7.0'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}
jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 1
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.94
            }
        }
    }
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

pmd {
    consoleOutput = true
    toolVersion = '6.54.0'
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}

sonarqube {
    properties {
        property "sonar.projectKey", "mfvanek_pg-index-health-demo"
        property "sonar.organization", "mfvanek"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

gradleLint {
    rules = ['all-dependency']
    alwaysRun = false
    autoLintAfterFailure = false
}

pitest {
    junit5PluginVersion = '1.1.2'
    pitestVersion = '1.10.4'
    threads = 4
    outputFormats = System.getenv('STRYKER_DASHBOARD_API_KEY') != null ? ['stryker-dashboard'] : ['HTML']
    timestampedReports = false
    mutationThreshold = 100
    excludedClasses = ['io.github.mfvanek.pg.index.health.demo.utils.PostgreSqlContainerWrapper']
}

tasks.named('pitest').configure {
    mustRunAfter test
}
build.dependsOn 'pitest'
