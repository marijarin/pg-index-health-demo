plugins {
    id 'java'
    id 'com.github.spotbugs' version '5.0.9'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'org.sonarqube' version '3.3'
    id 'io.freefair.lombok' version '6.5.0.3'
    id 'info.solidsoft.pitest' version '1.9.0'
}

group 'io.github.mfvanek'
version '0.6.2-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenLocal()
    mavenCentral()
}

def junitVersion = '5.9.0'
def testContainersVersion = '1.17.3'
dependencies {
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'io.github.mfvanek:pg-index-health:0.6.1'
    implementation 'org.postgresql:postgresql:42.4.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.liquibase:liquibase-core:4.15.0'
    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.apache.commons:commons-dbcp2:2.9.0'
    implementation "org.testcontainers:testcontainers:$testContainersVersion"
    implementation "org.testcontainers:postgresql:$testContainersVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    testImplementation 'org.mockito:mockito-core:4.7.0'

    pitest 'it.mulders.stryker:pit-dashboard-reporter:0.1.2'
}

test {
    useJUnitPlatform()
    dependsOn checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest
    maxParallelForks = 1
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

spotbugsMain {
    reports {
        html.enabled = true
    }
}
spotbugsTest {
    reports {
        html.enabled = true
    }
}
spotbugs {
    showProgress = true
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file("config/spotbugs/exclude.xml")
}

checkstyle {
    toolVersion '10.3.1'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}
jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 1
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.94
            }
        }
    }
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

pmd {
    consoleOutput = true
    toolVersion = "6.47.0"
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}

sonarqube {
    properties {
        property "sonar.projectKey", "mfvanek_pg-index-health-demo"
        property "sonar.organization", "mfvanek"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

pitest {
    junit5PluginVersion = '1.0.0'
    pitestVersion = '1.9.4'
    threads = 4
    outputFormats = System.getenv('STRYKER_DASHBOARD_API_KEY') != null ? ['stryker-dashboard'] : ['HTML']
    timestampedReports = false
    mutationThreshold = 100
    excludedClasses = ['io.github.mfvanek.pg.index.health.demo.utils.PostgreSqlContainerWrapper']
}

tasks.named('pitest').configure {
    mustRunAfter test
}
build.dependsOn 'pitest'
